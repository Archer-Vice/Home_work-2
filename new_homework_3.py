
""" Задание 1
Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык.

Например:

>>> num_translate("one")
"один"
>>> num_translate("eight")
"восемь"
Если перевод сделать невозможно, вернуть None.

Подумайте, как и где лучше хранить информацию, необходимую для перевода: какой тип данных выбрать,
в теле функции или снаружи. """

""" 1. Первый вариант решения и самый простой. Через модуль TextBlod, но имеет минусы.
Переводит так, как переводит переводчик гугл, а не так, как может быть нужно нам.
Как пример, eight, он переведёт, как 8. А также, делает это только при наличии интернета."""

### В терминале через pip подключаем модуль TextBlod

#  pip install -U textblob
#  python -m textblob.download_corpora


def num_translate(value: str) -> str:
    """переводит числительное с английского на русский """
    # реализуйте здесь, где хранить необходимые исходные данные определитесь самостоятельно
    from textblob import TextBlob
    f = TextBlob(value)
    str_out = (f.translate(from_lang='en', to='ru'))
    return str_out


print(num_translate("one"))
print(num_translate("eight"))



""" 2. Вариант создать словарь. Так мы будем получать именно то, что нам нужно. Но все данные нужно вбивать в ручную """


def num_translate(value: str) -> str:
    numbers = {"one": "один", "two": "два", "three": "три", "four": "четыре", "five": "пять", "six": "шесть",
               "seven": "семь", "eight": "восемь", "nine": "девять", "ten": "десять"}
    str_out = (numbers.get(value))
    return str_out


print(num_translate("one"))
print(num_translate("eight"))



""" Задание 2
*(вместо задачи 1) Перепишите функцию из задания 1 изменив название на num_translate_adv():
реализовать корректную работу с числительными, начинающимися с заглавной буквы — результат тоже должен быть с заглавной.

Например:

>>> num_translate_adv("One")
"Один"
>>> num_translate_adv("two")
"два" """


def num_translate_adv(value: str) -> str:
    numbers = {"one": "один", "two": "два", "three": "три", "four": "четыре", "five": "пять", "six": "шесть",
               "seven": "семь", "eight": "восемь", "nine": "девять", "ten": "десять"}
    if value.lower() in numbers:
        str_out = (numbers.get(value.lower()))
        return str_out.title()
    else:
        return None


print(num_translate_adv("Zero"))
print(num_translate_adv("Eight"))


""" Задание 3
Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь,
в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы.

Например:

>>> thesaurus("Иван", "Мария", "Петр", "Илья")
{
    "И": ["Иван", "Илья"], 
    "М": ["Мария"],
    "П": ["Петр"]
}
Подумайте:

полезен ли будет вам оператор распаковки?
Как поступить, если потребуется сортировка по ключам?
Можно ли использовать словарь в этом случае?
ВНИМАНИЕ! Используйте стартовый код для своей реализации

def thesaurus(*args) -> dict:
    # пишите свою реализацию здесь
    dict_out = {}  # результирующий словарь значений
    return dict_out


print(thesaurus("Иван", "Мария", "Петр", "Илья")) """



""" Задание 5 """


def get_jokes(n):
    import random as r

    nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
    adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
    adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]

    i = 0
    while i < n:
        print(((r.choice(nouns).capitalize()) + "," + " " + r.choice(adverbs) + " " + r.choice(adjectives)+"."+" "))
        i += 1


get_jokes(2)